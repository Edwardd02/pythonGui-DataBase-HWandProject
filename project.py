# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import student, course, instructor, schedule, registration
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox
from openpyxl import Workbook
import mysql.connector

#############################################################
#                                                           #
#                       UI Generation                       #
#                                                           #
#############################################################

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(975, 687)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.twtMain = QtWidgets.QTabWidget(self.centralwidget)
        self.twtMain.setGeometry(QtCore.QRect(10, 0, 951, 631))
        self.twtMain.setObjectName("twtMain")
        self.tabStudent = QtWidgets.QWidget()
        self.tabStudent.setObjectName("tabStudent")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.tabStudent)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.tblStudent = QtWidgets.QTableWidget(self.horizontalLayoutWidget_3)
        self.tblStudent.setObjectName("tblStudent")
        self.tblStudent.setColumnCount(4)
        self.tblStudent.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(3, item)
        self.horizontalLayout_5.addWidget(self.tblStudent)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.btnNewStudent = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnNewStudent.setObjectName("btnNewStudent")
        self.verticalLayout_7.addWidget(self.btnNewStudent)
        self.btnEditStudent = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnEditStudent.setObjectName("btnEditStudent")
        self.verticalLayout_7.addWidget(self.btnEditStudent)
        self.btnDeleteStudent = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnDeleteStudent.setObjectName("btnDeleteStudent")
        self.verticalLayout_7.addWidget(self.btnDeleteStudent)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem)
        self.horizontalLayout_5.addLayout(self.verticalLayout_7)
        self.twtMain.addTab(self.tabStudent, "")
        self.tabCourse = QtWidgets.QWidget()
        self.tabCourse.setObjectName("tabCourse")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tabCourse)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tblCourse = QtWidgets.QTableWidget(self.horizontalLayoutWidget)
        self.tblCourse.setObjectName("tblCourse")
        self.tblCourse.setColumnCount(2)
        self.tblCourse.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblCourse.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblCourse.setHorizontalHeaderItem(1, item)
        self.horizontalLayout.addWidget(self.tblCourse)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.btnNewCourse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnNewCourse.setObjectName("btnNewCourse")
        self.verticalLayout_4.addWidget(self.btnNewCourse)
        self.btnEditCourse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnEditCourse.setObjectName("btnEditCourse")
        self.verticalLayout_4.addWidget(self.btnEditCourse)
        self.btnDeleteCourse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnDeleteCourse.setObjectName("btnDeleteCourse")
        self.verticalLayout_4.addWidget(self.btnDeleteCourse)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem1)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.twtMain.addTab(self.tabCourse, "")
        self.tabInstructor = QtWidgets.QWidget()
        self.tabInstructor.setObjectName("tabInstructor")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tabInstructor)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tblInstructor = QtWidgets.QTableWidget(self.horizontalLayoutWidget_2)
        self.tblInstructor.setObjectName("tblInstructor")
        self.tblInstructor.setColumnCount(2)
        self.tblInstructor.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblInstructor.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblInstructor.setHorizontalHeaderItem(1, item)
        self.horizontalLayout_2.addWidget(self.tblInstructor)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.btnNewInstructor = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnNewInstructor.setObjectName("btnNewInstructor")
        self.verticalLayout_5.addWidget(self.btnNewInstructor)
        self.btnEditInstructor = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnEditInstructor.setObjectName("btnEditInstructor")
        self.verticalLayout_5.addWidget(self.btnEditInstructor)
        self.btnDeleteInstructor = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnDeleteInstructor.setObjectName("btnDeleteInstructor")
        self.verticalLayout_5.addWidget(self.btnDeleteInstructor)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.twtMain.addTab(self.tabInstructor, "")
        self.tabSchedule = QtWidgets.QWidget()
        self.tabSchedule.setObjectName("tabSchedule")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.tabSchedule)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.tblSchedule = QtWidgets.QTableWidget(self.horizontalLayoutWidget_4)
        self.tblSchedule.setObjectName("tblSchedule")
        self.tblSchedule.setColumnCount(6)
        self.tblSchedule.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(5, item)
        self.horizontalLayout_8.addWidget(self.tblSchedule)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.btnNewSchedule = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btnNewSchedule.setObjectName("btnNewSchedule")
        self.verticalLayout_8.addWidget(self.btnNewSchedule)
        self.btnEditSchedule = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btnEditSchedule.setObjectName("btnEditSchedule")
        self.verticalLayout_8.addWidget(self.btnEditSchedule)
        self.btnDeleteSchedule = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btnDeleteSchedule.setObjectName("btnDeleteSchedule")
        self.verticalLayout_8.addWidget(self.btnDeleteSchedule)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem3)
        self.horizontalLayout_8.addLayout(self.verticalLayout_8)
        self.twtMain.addTab(self.tabSchedule, "")
        self.tabRegistration = QtWidgets.QWidget()
        self.tabRegistration.setObjectName("tabRegistration")
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(self.tabRegistration)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.tblRegistration = QtWidgets.QTableWidget(self.horizontalLayoutWidget_7)
        self.tblRegistration.setObjectName("tblRegistration")
        self.tblRegistration.setColumnCount(5)
        self.tblRegistration.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(4, item)
        self.horizontalLayout_11.addWidget(self.tblRegistration)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.btnNewRegistration = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.btnNewRegistration.setObjectName("btnNewRegistration")
        self.verticalLayout_10.addWidget(self.btnNewRegistration)
        self.btnEditRegistration = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.btnEditRegistration.setObjectName("btnEditRegistration")
        self.verticalLayout_10.addWidget(self.btnEditRegistration)
        self.btnDeleteRegistration = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.btnDeleteRegistration.setObjectName("btnDeleteRegistration")
        self.verticalLayout_10.addWidget(self.btnDeleteRegistration)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_10.addItem(spacerItem4)
        self.horizontalLayout_11.addLayout(self.verticalLayout_10)
        self.twtMain.addTab(self.tabRegistration, "")
        self.tabAttendence = QtWidgets.QWidget()
        self.tabAttendence.setObjectName("tabAttendence")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tabAttendence)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.lblSemesterAttendence = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblSemesterAttendence.setObjectName("lblSemesterAttendence")
        self.horizontalLayout_10.addWidget(self.lblSemesterAttendence)
        self.cmbSemesterAttendence = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.cmbSemesterAttendence.setObjectName("cmbSemesterAttendence")
        self.horizontalLayout_10.addWidget(self.cmbSemesterAttendence)
        self.lblCourseAttendence = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblCourseAttendence.setObjectName("lblCourseAttendence")
        self.horizontalLayout_10.addWidget(self.lblCourseAttendence)
        self.cmbCourseAttendence = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.cmbCourseAttendence.setObjectName("cmbCourseAttendence")
        self.horizontalLayout_10.addWidget(self.cmbCourseAttendence)
        self.lblSectionAttendence = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblSectionAttendence.setObjectName("lblSectionAttendence")
        self.horizontalLayout_10.addWidget(self.lblSectionAttendence)
        self.cmbSectionAttendence = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.cmbSectionAttendence.setMaxVisibleItems(10)
        self.cmbSectionAttendence.setObjectName("cmbSectionAttendence")
        self.horizontalLayout_10.addWidget(self.cmbSectionAttendence)
        self.lblDateAttendence = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblDateAttendence.setObjectName("lblDateAttendence")
        self.horizontalLayout_10.addWidget(self.lblDateAttendence)
        self.dateAttendence = QtWidgets.QDateEdit(self.verticalLayoutWidget_2)
        self.dateAttendence.setCalendarPopup(True)
        self.dateAttendence.setDate(QtCore.QDate(2023, 7, 16))
        self.dateAttendence.setObjectName("dateAttendence")
        self.horizontalLayout_10.addWidget(self.dateAttendence)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem5)
        self.btnCreateRecord = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnCreateRecord.setObjectName("btnCreateRecord")
        self.horizontalLayout_10.addWidget(self.btnCreateRecord)
        self.btnDeleteAll = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnDeleteAll.setObjectName("btnDeleteAll")
        self.horizontalLayout_10.addWidget(self.btnDeleteAll)
        self.verticalLayout_2.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.tblAttendance = QtWidgets.QTableWidget(self.verticalLayoutWidget_2)
        self.tblAttendance.setObjectName("tblAttendance")
        self.tblAttendance.setColumnCount(8)
        self.tblAttendance.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(7, item)
        self.horizontalLayout_9.addWidget(self.tblAttendance)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.btnNewAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnNewAttendance.setObjectName("btnNewAttendance")
        self.verticalLayout_9.addWidget(self.btnNewAttendance)
        self.btnEditAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnEditAttendance.setObjectName("btnEditAttendance")
        self.verticalLayout_9.addWidget(self.btnEditAttendance)
        self.btnDeleteAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnDeleteAttendance.setObjectName("btnDeleteAttendance")
        self.verticalLayout_9.addWidget(self.btnDeleteAttendance)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem6)
        self.horizontalLayout_9.addLayout(self.verticalLayout_9)
        self.verticalLayout_2.addLayout(self.horizontalLayout_9)
        self.twtMain.addTab(self.tabAttendence, "")
        self.tabReports = QtWidgets.QWidget()
        self.tabReports.setObjectName("tabReports")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tabReports)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.lblSemesterReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblSemesterReports.setObjectName("lblSemesterReports")
        self.horizontalLayout_13.addWidget(self.lblSemesterReports)
        self.cmbSemesterReports = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmbSemesterReports.setObjectName("cmbSemesterReports")
        self.horizontalLayout_13.addWidget(self.cmbSemesterReports)
        self.lblCourseReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblCourseReports.setObjectName("lblCourseReports")
        self.horizontalLayout_13.addWidget(self.lblCourseReports)
        self.cmbCourseReports = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmbCourseReports.setObjectName("cmbCourseReports")
        self.horizontalLayout_13.addWidget(self.cmbCourseReports)
        self.lblSectionReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblSectionReports.setObjectName("lblSectionReports")
        self.horizontalLayout_13.addWidget(self.lblSectionReports)
        self.cmbSectionReports = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmbSectionReports.setMaxVisibleItems(10)
        self.cmbSectionReports.setObjectName("cmbSectionReports")
        self.horizontalLayout_13.addWidget(self.cmbSectionReports)
        self.lblDateReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblDateReports.setObjectName("lblDateReports")
        self.horizontalLayout_13.addWidget(self.lblDateReports)
        self.dateDateReports = QtWidgets.QDateEdit(self.verticalLayoutWidget)
        self.dateDateReports.setCalendarPopup(True)
        self.dateDateReports.setDate(QtCore.QDate(2023, 7, 16))
        self.dateDateReports.setObjectName("dateDateReports")
        self.horizontalLayout_13.addWidget(self.dateDateReports)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem7)
        self.verticalLayout.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tblReports = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tblReports.setObjectName("tblReports")
        self.tblReports.setColumnCount(4)
        self.tblReports.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(3, item)
        self.horizontalLayout_3.addWidget(self.tblReports)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.btnReport1 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnReport1.setObjectName("btnReport1")
        self.verticalLayout_11.addWidget(self.btnReport1)
        self.btnReport2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnReport2.setObjectName("btnReport2")
        self.verticalLayout_11.addWidget(self.btnReport2)
        self.btnReport3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnReport3.setObjectName("btnReport3")
        self.verticalLayout_11.addWidget(self.btnReport3)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_11.addItem(spacerItem8)
        self.horizontalLayout_3.addLayout(self.verticalLayout_11)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.twtMain.addTab(self.tabReports, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 975, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.twtMain.setCurrentIndex(4)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        # Update UI Here
        self.initialSetup()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tblStudent.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Student ID"))
        item = self.tblStudent.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblStudent.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblStudent.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Email"))
        self.btnNewStudent.setText(_translate("MainWindow", "New"))
        self.btnEditStudent.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteStudent.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabStudent), _translate("MainWindow", "Student"))
        item = self.tblCourse.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblCourse.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Course Title"))
        self.btnNewCourse.setText(_translate("MainWindow", "New"))
        self.btnEditCourse.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteCourse.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabCourse), _translate("MainWindow", "Course"))
        item = self.tblInstructor.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Instructor ID"))
        item = self.tblInstructor.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Instructor Name"))
        self.btnNewInstructor.setText(_translate("MainWindow", "New"))
        self.btnEditInstructor.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteInstructor.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabInstructor), _translate("MainWindow", "Instructor"))
        item = self.tblSchedule.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Schedule ID"))
        item = self.tblSchedule.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Instructor Name"))
        item = self.tblSchedule.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblSchedule.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Section"))
        item = self.tblSchedule.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Course Title"))
        item = self.tblSchedule.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Semester"))
        self.btnNewSchedule.setText(_translate("MainWindow", "New"))
        self.btnEditSchedule.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteSchedule.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabSchedule), _translate("MainWindow", "Schedule"))
        item = self.tblRegistration.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Registration ID"))
        item = self.tblRegistration.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Student Name"))
        item = self.tblRegistration.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblRegistration.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Section"))
        item = self.tblRegistration.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Semester"))
        self.btnNewRegistration.setText(_translate("MainWindow", "New"))
        self.btnEditRegistration.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteRegistration.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabRegistration), _translate("MainWindow", "Registration"))
        self.lblSemesterAttendence.setText(_translate("MainWindow", "Semester: "))
        self.lblCourseAttendence.setText(_translate("MainWindow", "Course: "))
        self.lblSectionAttendence.setText(_translate("MainWindow", "Section: "))
        self.lblDateAttendence.setText(_translate("MainWindow", "Date:"))
        self.btnCreateRecord.setText(_translate("MainWindow", "Create Record"))
        self.btnDeleteAll.setText(_translate("MainWindow", "Delete All"))
        item = self.tblAttendance.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Attendance ID"))
        item = self.tblAttendance.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblAttendance.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblAttendance.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Semester"))
        item = self.tblAttendance.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblAttendance.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Section"))
        item = self.tblAttendance.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Date"))
        item = self.tblAttendance.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Status"))
        self.btnNewAttendance.setText(_translate("MainWindow", "New"))
        self.btnEditAttendance.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteAttendance.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabAttendence), _translate("MainWindow", "Attendance"))
        self.lblSemesterReports.setText(_translate("MainWindow", "Semester: "))
        self.lblCourseReports.setText(_translate("MainWindow", "Course: "))
        self.lblSectionReports.setText(_translate("MainWindow", "Section: "))
        self.lblDateReports.setText(_translate("MainWindow", "Date:"))
        item = self.tblReports.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblReports.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblReports.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Date"))
        item = self.tblReports.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Status"))
        self.btnReport1.setText(_translate("MainWindow", "Report1"))
        self.btnReport2.setText(_translate("MainWindow", "Report2"))
        self.btnReport3.setText(_translate("MainWindow", "Report3"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabReports), _translate("MainWindow", "Reports"))

    ##################### End UI Generation ###################

    def initialSetup(self):
        self.setupEvents()
        self.setupDatabase()

    #############################################################
    #                                                           #
    #                          Events                           #
    #                                                           #
    #############################################################
    def setupEvents(self):
        self.connectButtonClicked(self.btnNewStudent, self.btnNewStudent_clicked)
        self.connectButtonClicked(self.btnEditStudent, self.btnEditStudent_clicked)
        self.connectButtonClicked(self.btnDeleteStudent, self.btnDeleteStudent_clicked)
        self.connectButtonClicked(self.btnNewCourse, self.btnNewCourse_clicked)
        self.connectButtonClicked(self.btnEditCourse, self.btnEditCourse_clicked)
        self.connectButtonClicked(self.btnDeleteCourse, self.btnDeleteCourse_clicked)
        self.connectButtonClicked(self.btnNewInstructor, self.btnNewInstructor_clicked)
        self.connectButtonClicked(self.btnEditInstructor, self.btnEditInstructor_clicked)
        self.connectButtonClicked(self.btnDeleteInstructor, self.btnDeleteInstructor_clicked)
        self.connectButtonClicked(self.btnNewSchedule, self.btnNewSchedule_clicked)
        self.connectButtonClicked(self.btnEditSchedule, self.btnEditSchedule_clicked)
        self.connectButtonClicked(self.btnDeleteSchedule, self.btnDeleteSchedule_clicked)
        self.connectButtonClicked(self.btnNewRegistration, self.btnNewRegistration_clicked)
        self.connectButtonClicked(self.btnEditRegistration, self.btnEditRegistration_clicked)
        self.connectButtonClicked(self.btnDeleteRegistration, self.btnDeleteRegistration_clicked)

    def connectButtonClicked(self, button, slot):
        button.clicked.connect(slot)

    def btnNewStudent_clicked(self):
        listValues = self.openDialog(student, None)

        if listValues is not None:
            self.insertStudent(listValues)
            self.refreshStudent()

    def btnEditStudent_clicked(self):
        self.editRow(student, self.tblStudent, self.updateStudent, self.refreshStudent)
        self.refreshRegistration()

    def btnDeleteStudent_clicked(self):
        self.deleteRow(self.tblStudent, self.deleteStudent, self.refreshStudent)

    def btnNewCourse_clicked(self):
        listValues = self.openDialog(course, None)

        if listValues is not None:
            self.insertCourse(listValues)
            self.refreshCourse()
            self.refreshSchedule()

    def btnEditCourse_clicked(self):
        self.editRow(course, self.tblCourse, self.updateCourse, self.refreshCourse)
        self.refreshRegistration()

    def btnDeleteCourse_clicked(self):
        self.deleteRow(self.tblCourse, self.deleteCourse, self.refreshCourse)

    def btnNewInstructor_clicked(self):
        listValues = self.openDialog(instructor, None)

        if listValues is not None:
            self.insertInstructor(listValues)
            self.refreshInstructor()
            self.refreshSchedule()

    def btnEditInstructor_clicked(self):
        self.editRow(instructor, self.tblInstructor, self.updateInstructor, self.refreshInstructor)

    def btnDeleteInstructor_clicked(self):
        self.deleteRow(self.tblInstructor, self.deleteInstructor, self.refreshInstructor)

    def btnNewSchedule_clicked(self):
        listValues = self.openDialog(schedule, None)

        if listValues is not None:
            self.insertSchedule(listValues)
            self.refreshSchedule()

    def btnEditSchedule_clicked(self):
        currentRow = self.tblSchedule.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return

        listValues = []
        listValues.append(self.tblSchedule.item(currentRow, 1).text())  # Instructor
        listValues.append(self.tblSchedule.item(currentRow, 2).text())  # Course
        listValues.append(self.tblSchedule.item(currentRow, 3).text())  # Section
        listValues.append(self.tblSchedule.item(currentRow, 5).text())  # Semester
        schedule_id = self.tblSchedule.item(currentRow, 0).text()

        listValues = self.openDialog(schedule, listValues)
        if listValues is not None:
            self.updateSchedule(listValues, schedule_id)
            self.refreshSchedule()
            self.refreshRegistration()

    def btnDeleteSchedule_clicked(self):
        self.deleteRow(self.tblSchedule, self.deleteSchedule, self.refreshSchedule)

    def btnNewRegistration_clicked(self):
        listValues = self.openDialog(registration, None)

        if listValues is not None:
            self.insertRegistration(listValues)
            self.refreshRegistration()

    def btnEditRegistration_clicked(self):
        currentRow = self.tblRegistration.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return

        listValues = []
        listValues.append(self.tblRegistration.item(currentRow, 1).text())  # Student
        listValues.append(self.tblRegistration.item(currentRow, 2).text())  # Course
        listValues.append(self.tblRegistration.item(currentRow, 3).text())  # Section
        listValues.append(self.tblRegistration.item(currentRow, 4).text())  # Semester
        registration_id = self.tblRegistration.item(currentRow, 0).text()

        listValues = self.openDialog(registration, listValues)
        if listValues is not None:
            self.updateRegistration(listValues, registration_id)
            self.refreshRegistration()

    def btnDeleteRegistration_clicked(self):
        self.deleteRow(self.tblRegistration, self.deleteRegistration, self.refreshRegistration)

    def openDialog(self, dialogClass, listValues):
        Dialog = QtWidgets.QDialog()
        form = dialogClass.Ui_Dialog()
        form.setupUi(Dialog, listValues)
        result = Dialog.exec_()

        if result == 1:
            return form.getValues()

        return None

    def getCurrentRowValues(self, tableWidget):
        currentRow = tableWidget.currentRow()
        if currentRow == -1:  # No row selected
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return None
        else:
            listValues = [tableWidget.item(currentRow, column).text() for column in range(tableWidget.columnCount())]
            return listValues

    def editRow(self, dialogClass, tableWidget, updateFunction, refreshFunction):
        listValues = self.getCurrentRowValues(tableWidget)
        if listValues is None:  # No row selected
            return

        original_ID = listValues[0]
        listValues = self.openDialog(dialogClass, listValues)
        if listValues is not None:
            updateFunction(listValues, original_ID)
            refreshFunction()

    def deleteRow(self, tableWidget, deleteFunction, refreshFunction):
        listValues = self.getCurrentRowValues(tableWidget)
        if listValues is None:  # No row selected
            return

        answer = QMessageBox.question(
            None,
            "Delete row?",
            "Are you sure you want to delete this row?",
            QMessageBox.StandardButton.Yes |
            QMessageBox.StandardButton.No
        )

        # Check if user clicked Yes button
        if answer == QMessageBox.StandardButton.Yes:
            ID = listValues[0]

            # Delete from database
            deleteFunction(ID)

            # Requery
            refreshFunction()

    #############################################################
    #                                                           #
    #                          Database                         #
    #                                                           #
    #############################################################

    def setupDatabase(self):
        # Establishes the connection and refreshes category and expense data
        self.connect()
        self.refreshStudent()
        self.refreshCourse()
        self.refreshInstructor()
        self.refreshSchedule()
        self.refreshRegistration()

    def connect(self):
        # Connects to the database
        self.cnx = mysql.connector.connect(user="root",
                                           password="ljt916159807",
                                           host="127.0.0.1",
                                           database="mydb")

    def execute_query(self, query, values=None):
        # Creates a cursor, executes a query, and then returns the cursor
        cursor = self.cnx.cursor()
        cursor.execute(query, values)
        return cursor

    def commit_and_close(self, cursor):
        # Commits any changes and closes the cursor
        self.cnx.commit()
        cursor.close()

    def refreshStudent(self):
        # Refreshes the student view by clearing the table and inserting the new data
        self.tblStudent.setRowCount(0)
        self.tblStudent.setColumnWidth(3, 250)

        cursor = self.execute_query("Select * From student")

        for (student_ID, student_first_name, student_last_name, student_email) in cursor:  # Field names in DB
            rowCount = self.tblStudent.rowCount()
            self.tblStudent.insertRow(rowCount)
            self.tblStudent.setItem(rowCount, 0, QTableWidgetItem(str(student_ID)))
            self.tblStudent.setItem(rowCount, 1, QTableWidgetItem(student_first_name))
            self.tblStudent.setItem(rowCount, 2, QTableWidgetItem(student_last_name))
            self.tblStudent.setItem(rowCount, 3, QTableWidgetItem(student_email))

        self.commit_and_close(cursor)

    def insertStudent(self, a_listValues):
        # Inserts a new student into the database
        cursor = self.execute_query(
            "Insert Into student (student_id, student_first_name, student_last_name, student_email) "
            "Values (%s, %s, %s, %s)", (a_listValues[0], a_listValues[1], a_listValues[2], a_listValues[3]))
        self.commit_and_close(cursor)

    def updateStudent(self, a_listValues, original_student_ID):
        # Updates an existing student in the database
        cursor = self.execute_query("Update student "
                                    "Set student_ID = %s, student_first_name = %s, student_last_name = %s, student_email = %s "
                                    "Where student_ID = %s",
                                    [a_listValues[0], a_listValues[1], a_listValues[2], a_listValues[3],
                                     original_student_ID])
        self.commit_and_close(cursor)

    def deleteStudent(self, a_ID):
        # Deletes a student from the database
        # TODO: make sure student in other tables could not be deleted
        cursor = self.execute_query("Delete from student Where student_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshCourse(self):
        # Refreshes the course view by clearing the table and inserting the new data
        self.tblCourse.setRowCount(0)
        self.tblCourse.setColumnWidth(1, 700)

        cursor = self.execute_query("Select * From course")

        for (course_ID, course_title) in cursor:  # Field names in DB
            rowCount = self.tblCourse.rowCount()
            self.tblCourse.insertRow(rowCount)
            self.tblCourse.setItem(rowCount, 0, QTableWidgetItem(str(course_ID)))
            self.tblCourse.setItem(rowCount, 1, QTableWidgetItem(course_title))

        self.commit_and_close(cursor)

    def insertCourse(self, a_listValues):
        # Inserts a new course into the database
        cursor = self.execute_query("Insert Into course (course_id, course_title) "
                                    "Values (%s, %s)", (a_listValues[0], a_listValues[1]))
        self.commit_and_close(cursor)

    def updateCourse(self, a_listValues, original_course_ID):
        # Updates an existing course in the database
        cursor = self.execute_query("Update course "
                                    "Set course_ID = %s, course_title = %s"
                                    "Where course_ID = %s",
                                    [a_listValues[0], a_listValues[1], original_course_ID])
        self.commit_and_close(cursor)

    def deleteCourse(self, a_ID):
        # Deletes a course from the database
        # TODO: make sure course in other tables could not be deleted
        cursor = self.execute_query("Delete from course Where course_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshInstructor(self):
        # Refreshes the instructor view by clearing the table and inserting the new data
        self.tblInstructor.setRowCount(0)

        cursor = self.execute_query("Select * From instructor")

        for (instructor_id, instructor_name) in cursor:  # Field names in DB
            rowCount = self.tblInstructor.rowCount()
            self.tblInstructor.insertRow(rowCount)
            self.tblInstructor.setItem(rowCount, 0, QTableWidgetItem(str(instructor_id)))
            self.tblInstructor.setItem(rowCount, 1, QTableWidgetItem(instructor_name))

        self.commit_and_close(cursor)

    def insertInstructor(self, a_listValues):
        # Inserts a new instructor into the database
        cursor = self.execute_query("Insert Into instructor (instructor_id, instructor_name) "
                                    "Values (%s, %s)", (a_listValues[0], a_listValues[1]))
        self.commit_and_close(cursor)

    def updateInstructor(self, a_listValues, original_instructor_ID):
        # Updates an existing instructor in the database
        cursor = self.execute_query("Update instructor "
                                    "Set instructor_id = %s, instructor_name = %s"
                                    "Where instructor_id = %s",
                                    [a_listValues[0], a_listValues[1], original_instructor_ID])
        self.commit_and_close(cursor)

    def deleteInstructor(self, a_ID):
        # Deletes a instructor from the database
        # TODO: make sure instructor in other tables could not be deleted
        cursor = self.execute_query("Delete from instructor Where instructor_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshSchedule(self):
        self.tblSchedule.setColumnWidth(3, 60)
        self.tblSchedule.setColumnWidth(4, 350)
        # Refreshes the schedule view by clearing the table and inserting the new data
        self.tblSchedule.setRowCount(0)

        cursor = self.execute_query("Select schedule_id, instructor_name, course_id, section, course_title, semester "
                                    "from schedule natural join instructor "
                                    "natural join course "
                                    "order by semester, course_id, section")

        for (schedule_id, instructor_name, course_id, section, course_title, semester) in cursor:
            rowCount = self.tblSchedule.rowCount()
            self.tblSchedule.insertRow(rowCount)
            self.tblSchedule.setItem(rowCount, 0, QTableWidgetItem(str(schedule_id)))
            self.tblSchedule.setItem(rowCount, 1, QTableWidgetItem(str(instructor_name)))
            self.tblSchedule.setItem(rowCount, 2, QTableWidgetItem(str(course_id)))
            self.tblSchedule.setItem(rowCount, 3, QTableWidgetItem(str(section)))
            self.tblSchedule.setItem(rowCount, 4, QTableWidgetItem(str(course_title)))
            self.tblSchedule.setItem(rowCount, 5, QTableWidgetItem(str(semester)))

        self.commit_and_close(cursor)

    def insertSchedule(self, a_listValues):
        # Inserts a new schedule into the database
        instructor_id = self.getInstructorID(a_listValues)
        cursor = self.execute_query(
            "Insert Into schedule (instructor_id, course_id, section, semester) "
            "Values (%s, %s, %s, %s )",
            (instructor_id, a_listValues[1], a_listValues[2], a_listValues[3]))
        self.commit_and_close(cursor)

    def updateSchedule(self, a_listValues, schedule_id):
        # Updates an existing schedule in the database
        instructor_id = self.getInstructorID(a_listValues)
        cursor = self.execute_query("Update schedule "
                                    "Set instructor_id = %s, course_id = %s, section = %s, semester = %s "
                                    "Where schedule_id = %s",
                                    [instructor_id, a_listValues[1], a_listValues[2], a_listValues[3], schedule_id])
        self.commit_and_close(cursor)

    def getInstructorID(self, a_listValues):
        # Returns the ID of a instructor based on its name
        cursor = self.execute_query("Select instructor_id From instructor Where instructor_name = %s",
                                    (a_listValues[0],))
        result = cursor.fetchone()
        instructor_id = result[0]
        cursor.close()

        return instructor_id

    def deleteSchedule(self, a_ID):
        # Deletes a schedule from the database
        cursor = self.execute_query("Delete from schedule Where schedule_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshRegistration(self):
        # Refreshes the registration view by clearing the table and inserting the new data
        self.tblRegistration.setRowCount(0)

        cursor = self.execute_query("Select registration_id, concat(student_first_name, ' ', student_last_name), course_id, section, semester "
                                    "from registration natural join student "
                                    "natural join schedule")

        for (registration_id, student_name, course_id, section, semester) in cursor:
            rowCount = self.tblRegistration.rowCount()
            self.tblRegistration.insertRow(rowCount)
            self.tblRegistration.setItem(rowCount, 0, QTableWidgetItem(str(registration_id)))
            self.tblRegistration.setItem(rowCount, 1, QTableWidgetItem(str(student_name)))
            self.tblRegistration.setItem(rowCount, 2, QTableWidgetItem(str(course_id)))
            self.tblRegistration.setItem(rowCount, 3, QTableWidgetItem(str(section)))
            self.tblRegistration.setItem(rowCount, 4, QTableWidgetItem(str(semester)))

        self.commit_and_close(cursor)

    def insertRegistration(self, a_listValues):
        # Inserts a new registration into the database
        student_id = self.getStudentID(a_listValues[0])
        schedule_id = self.getScheduleID(a_listValues[1])
        cursor = self.execute_query(
            "Insert Into registration (student_id, schedule_id) "
            "Values (%s, %s)",
            (student_id, schedule_id))
        self.commit_and_close(cursor)

    def getStudentID(self, a_listValues):
        # Returns the ID of a student based on its name
        student_name = a_listValues.split(" ")  # Split the full name into parts
        student_first_name = student_name[0]
        student_last_name = student_name[1]

        cursor = self.execute_query("Select student_id "
                                    "from student "
                                    "Where student_first_name = %s and student_last_name = %s",
                                    [student_first_name, student_last_name])
        result = cursor.fetchone()
        self.commit_and_close(cursor)

        if result is not None:
            return result[0]

        return None



    def updateRegistration(self, a_listValues, registration_id):
        # Updates an existing registration in the database
        student_id = self.getStudentID(a_listValues[0])
        schedule_id = self.getScheduleID(a_listValues[1])
        cursor = self.execute_query("Update registration "
                                    "Set student_id = %s, schedule_id = %s "
                                    "Where registration_id = %s",
                                    [student_id,schedule_id, registration_id])
        self.commit_and_close(cursor)

    def deleteRegistration(self, a_ID):
        # Deletes a registration from the database
        cursor = self.execute_query("Delete from registration Where registration_ID = %s", [a_ID])
        self.commit_and_close(cursor)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
