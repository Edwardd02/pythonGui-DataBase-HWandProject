# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import student, course, instructor, schedule, registration, attendanceCreateAll, attendance
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox, QApplication, QMainWindow, QComboBox, QVBoxLayout, QWidget
from openpyxl import Workbook
import mysql.connector

#############################################################
#                                                           #
#                       UI Generation                       #
#                                                           #
#############################################################

from PyQt5 import QtCore, QtGui, QtWidgets

studentId = []


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(975, 687)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.twtMain = QtWidgets.QTabWidget(self.centralwidget)
        self.twtMain.setGeometry(QtCore.QRect(10, 0, 951, 631))
        self.twtMain.setObjectName("twtMain")
        self.tabStudent = QtWidgets.QWidget()
        self.tabStudent.setObjectName("tabStudent")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.tabStudent)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.tblStudent = QtWidgets.QTableWidget(self.horizontalLayoutWidget_3)
        self.tblStudent.setObjectName("tblStudent")
        self.tblStudent.setColumnCount(4)
        self.tblStudent.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblStudent.setHorizontalHeaderItem(3, item)
        self.horizontalLayout_5.addWidget(self.tblStudent)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.btnNewStudent = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnNewStudent.setObjectName("btnNewStudent")
        self.verticalLayout_7.addWidget(self.btnNewStudent)
        self.btnEditStudent = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnEditStudent.setObjectName("btnEditStudent")
        self.verticalLayout_7.addWidget(self.btnEditStudent)
        self.btnDeleteStudent = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.btnDeleteStudent.setObjectName("btnDeleteStudent")
        self.verticalLayout_7.addWidget(self.btnDeleteStudent)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem)
        self.horizontalLayout_5.addLayout(self.verticalLayout_7)
        self.twtMain.addTab(self.tabStudent, "")
        self.tabCourse = QtWidgets.QWidget()
        self.tabCourse.setObjectName("tabCourse")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tabCourse)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tblCourse = QtWidgets.QTableWidget(self.horizontalLayoutWidget)
        self.tblCourse.setObjectName("tblCourse")
        self.tblCourse.setColumnCount(2)
        self.tblCourse.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblCourse.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblCourse.setHorizontalHeaderItem(1, item)
        self.horizontalLayout.addWidget(self.tblCourse)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.btnNewCourse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnNewCourse.setObjectName("btnNewCourse")
        self.verticalLayout_4.addWidget(self.btnNewCourse)
        self.btnEditCourse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnEditCourse.setObjectName("btnEditCourse")
        self.verticalLayout_4.addWidget(self.btnEditCourse)
        self.btnDeleteCourse = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.btnDeleteCourse.setObjectName("btnDeleteCourse")
        self.verticalLayout_4.addWidget(self.btnDeleteCourse)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem1)
        self.horizontalLayout.addLayout(self.verticalLayout_4)
        self.twtMain.addTab(self.tabCourse, "")
        self.tabInstructor = QtWidgets.QWidget()
        self.tabInstructor.setObjectName("tabInstructor")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tabInstructor)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tblInstructor = QtWidgets.QTableWidget(self.horizontalLayoutWidget_2)
        self.tblInstructor.setObjectName("tblInstructor")
        self.tblInstructor.setColumnCount(2)
        self.tblInstructor.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblInstructor.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblInstructor.setHorizontalHeaderItem(1, item)
        self.horizontalLayout_2.addWidget(self.tblInstructor)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.btnNewInstructor = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnNewInstructor.setObjectName("btnNewInstructor")
        self.verticalLayout_5.addWidget(self.btnNewInstructor)
        self.btnEditInstructor = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnEditInstructor.setObjectName("btnEditInstructor")
        self.verticalLayout_5.addWidget(self.btnEditInstructor)
        self.btnDeleteInstructor = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.btnDeleteInstructor.setObjectName("btnDeleteInstructor")
        self.verticalLayout_5.addWidget(self.btnDeleteInstructor)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.twtMain.addTab(self.tabInstructor, "")
        self.tabSchedule = QtWidgets.QWidget()
        self.tabSchedule.setObjectName("tabSchedule")
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.tabSchedule)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.tblSchedule = QtWidgets.QTableWidget(self.horizontalLayoutWidget_4)
        self.tblSchedule.setObjectName("tblSchedule")
        self.tblSchedule.setColumnCount(6)
        self.tblSchedule.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblSchedule.setHorizontalHeaderItem(5, item)
        self.horizontalLayout_8.addWidget(self.tblSchedule)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.btnNewSchedule = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btnNewSchedule.setObjectName("btnNewSchedule")
        self.verticalLayout_8.addWidget(self.btnNewSchedule)
        self.btnEditSchedule = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btnEditSchedule.setObjectName("btnEditSchedule")
        self.verticalLayout_8.addWidget(self.btnEditSchedule)
        self.btnDeleteSchedule = QtWidgets.QPushButton(self.horizontalLayoutWidget_4)
        self.btnDeleteSchedule.setObjectName("btnDeleteSchedule")
        self.verticalLayout_8.addWidget(self.btnDeleteSchedule)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem3)
        self.horizontalLayout_8.addLayout(self.verticalLayout_8)
        self.twtMain.addTab(self.tabSchedule, "")
        self.tabRegistration = QtWidgets.QWidget()
        self.tabRegistration.setObjectName("tabRegistration")
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(self.tabRegistration)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.tblRegistration = QtWidgets.QTableWidget(self.horizontalLayoutWidget_7)
        self.tblRegistration.setObjectName("tblRegistration")
        self.tblRegistration.setColumnCount(5)
        self.tblRegistration.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblRegistration.setHorizontalHeaderItem(4, item)
        self.horizontalLayout_11.addWidget(self.tblRegistration)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.btnNewRegistration = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.btnNewRegistration.setObjectName("btnNewRegistration")
        self.verticalLayout_10.addWidget(self.btnNewRegistration)
        self.btnEditRegistration = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.btnEditRegistration.setObjectName("btnEditRegistration")
        self.verticalLayout_10.addWidget(self.btnEditRegistration)
        self.btnDeleteRegistration = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.btnDeleteRegistration.setObjectName("btnDeleteRegistration")
        self.verticalLayout_10.addWidget(self.btnDeleteRegistration)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_10.addItem(spacerItem4)
        self.horizontalLayout_11.addLayout(self.verticalLayout_10)
        self.twtMain.addTab(self.tabRegistration, "")
        self.tabAttendance = QtWidgets.QWidget()
        self.tabAttendance.setObjectName("tabAttendance")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tabAttendance)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.lblSemesterAttendance = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblSemesterAttendance.setObjectName("lblSemesterAttendance")
        self.horizontalLayout_10.addWidget(self.lblSemesterAttendance)
        self.cmbSemesterAttendance = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.cmbSemesterAttendance.setObjectName("cmbSemesterAttendance")
        self.horizontalLayout_10.addWidget(self.cmbSemesterAttendance)
        self.lblCourseAttendance = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblCourseAttendance.setObjectName("lblCourseAttendance")
        self.horizontalLayout_10.addWidget(self.lblCourseAttendance)
        self.cmbCourseAttendance = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.cmbCourseAttendance.setObjectName("cmbCourseAttendance")
        self.horizontalLayout_10.addWidget(self.cmbCourseAttendance)
        self.lblSectionAttendance = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblSectionAttendance.setObjectName("lblSectionAttendance")
        self.horizontalLayout_10.addWidget(self.lblSectionAttendance)
        self.cmbSectionAttendance = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        self.cmbSectionAttendance.setMaxVisibleItems(10)
        self.cmbSectionAttendance.setObjectName("cmbSectionAttendance")
        self.horizontalLayout_10.addWidget(self.cmbSectionAttendance)
        self.lblDateAttendance = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.lblDateAttendance.setObjectName("lblDateAttendance")
        self.horizontalLayout_10.addWidget(self.lblDateAttendance)
        self.dateAttendance = QtWidgets.QDateEdit(self.verticalLayoutWidget_2)
        self.dateAttendance.setCalendarPopup(True)
        self.dateAttendance.setDate(QtCore.QDate(2023, 7, 16))
        self.dateAttendance.setObjectName("dateAttendance")
        self.horizontalLayout_10.addWidget(self.dateAttendance)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem5)
        self.btnCreateAll = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnCreateAll.setObjectName("btnCreateAll")
        self.horizontalLayout_10.addWidget(self.btnCreateAll)
        self.btnDeleteAll = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnDeleteAll.setObjectName("btnDeleteAll")
        self.horizontalLayout_10.addWidget(self.btnDeleteAll)
        self.verticalLayout_2.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.tblAttendance = QtWidgets.QTableWidget(self.verticalLayoutWidget_2)
        self.tblAttendance.setObjectName("tblAttendance")
        self.tblAttendance.setColumnCount(8)
        self.tblAttendance.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblAttendance.setHorizontalHeaderItem(7, item)
        self.horizontalLayout_9.addWidget(self.tblAttendance)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.btnNewAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnNewAttendance.setObjectName("btnNewAttendance")
        self.verticalLayout_9.addWidget(self.btnNewAttendance)
        self.btnEditAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnEditAttendance.setObjectName("btnEditAttendance")
        self.verticalLayout_9.addWidget(self.btnEditAttendance)
        self.btnDeleteAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.btnDeleteAttendance.setObjectName("btnDeleteAttendance")
        self.verticalLayout_9.addWidget(self.btnDeleteAttendance)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem6)
        self.horizontalLayout_9.addLayout(self.verticalLayout_9)
        self.verticalLayout_2.addLayout(self.horizontalLayout_9)
        self.twtMain.addTab(self.tabAttendance, "")
        self.tabReports = QtWidgets.QWidget()
        self.tabReports.setObjectName("tabReports")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tabReports)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 931, 591))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.lblSemesterReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblSemesterReports.setObjectName("lblSemesterReports")
        self.horizontalLayout_13.addWidget(self.lblSemesterReports)
        self.cmbSemesterReports = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmbSemesterReports.setObjectName("cmbSemesterReports")
        self.horizontalLayout_13.addWidget(self.cmbSemesterReports)
        self.lblCourseReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblCourseReports.setObjectName("lblCourseReports")
        self.horizontalLayout_13.addWidget(self.lblCourseReports)
        self.cmbCourseReports = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmbCourseReports.setObjectName("cmbCourseReports")
        self.horizontalLayout_13.addWidget(self.cmbCourseReports)
        self.lblSectionReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblSectionReports.setObjectName("lblSectionReports")
        self.horizontalLayout_13.addWidget(self.lblSectionReports)
        self.cmbSectionReports = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.cmbSectionReports.setMaxVisibleItems(10)
        self.cmbSectionReports.setObjectName("cmbSectionReports")
        self.horizontalLayout_13.addWidget(self.cmbSectionReports)
        self.lblDateReports = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.lblDateReports.setObjectName("lblDateReports")
        self.horizontalLayout_13.addWidget(self.lblDateReports)
        self.dateReports = QtWidgets.QDateEdit(self.verticalLayoutWidget)
        self.dateReports.setCalendarPopup(True)
        self.dateReports.setDate(QtCore.QDate(2023, 7, 16))
        self.dateReports.setObjectName("dateReports")
        self.horizontalLayout_13.addWidget(self.dateReports)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem7)
        self.verticalLayout.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tblReports = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tblReports.setObjectName("tblReports")
        self.tblReports.setColumnCount(4)
        self.tblReports.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tblReports.setHorizontalHeaderItem(3, item)
        self.horizontalLayout_3.addWidget(self.tblReports)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.btnCourseAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnCourseAttendance.setObjectName("btnCourseAttendance")
        self.verticalLayout_11.addWidget(self.btnCourseAttendance)
        self.btnCourseEnrollment = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnCourseEnrollment.setObjectName("btnCourseEnrollment")
        self.verticalLayout_11.addWidget(self.btnCourseEnrollment)
        self.btnStudentAttendance = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btnStudentAttendance.setObjectName("btnStudentAttendance")
        self.verticalLayout_11.addWidget(self.btnStudentAttendance)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_11.addItem(spacerItem8)
        self.horizontalLayout_3.addLayout(self.verticalLayout_11)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.twtMain.addTab(self.tabReports, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 975, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.twtMain.setCurrentIndex(4)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Update UI Here
        self.initialSetup()
        self.connect_signals()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tblStudent.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Student ID"))
        item = self.tblStudent.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblStudent.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblStudent.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Email"))
        self.btnNewStudent.setText(_translate("MainWindow", "New"))
        self.btnEditStudent.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteStudent.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabStudent), _translate("MainWindow", "Student"))
        item = self.tblCourse.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblCourse.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Course Title"))
        self.btnNewCourse.setText(_translate("MainWindow", "New"))
        self.btnEditCourse.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteCourse.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabCourse), _translate("MainWindow", "Course"))
        item = self.tblInstructor.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Instructor ID"))
        item = self.tblInstructor.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Instructor Name"))
        self.btnNewInstructor.setText(_translate("MainWindow", "New"))
        self.btnEditInstructor.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteInstructor.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabInstructor), _translate("MainWindow", "Instructor"))
        item = self.tblSchedule.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Schedule ID"))
        item = self.tblSchedule.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Instructor Name"))
        item = self.tblSchedule.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblSchedule.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Section"))
        item = self.tblSchedule.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Course Title"))
        item = self.tblSchedule.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Semester"))
        self.btnNewSchedule.setText(_translate("MainWindow", "New"))
        self.btnEditSchedule.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteSchedule.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabSchedule), _translate("MainWindow", "Schedule"))
        item = self.tblRegistration.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Registration ID"))
        item = self.tblRegistration.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Student Name"))
        item = self.tblRegistration.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblRegistration.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Section"))
        item = self.tblRegistration.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Semester"))
        self.btnNewRegistration.setText(_translate("MainWindow", "New"))
        self.btnEditRegistration.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteRegistration.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabRegistration), _translate("MainWindow", "Registration"))
        self.lblSemesterAttendance.setText(_translate("MainWindow", "Semester: "))
        self.lblCourseAttendance.setText(_translate("MainWindow", "Course: "))
        self.lblSectionAttendance.setText(_translate("MainWindow", "Section: "))
        self.lblDateAttendance.setText(_translate("MainWindow", "Date:"))
        self.btnCreateAll.setText(_translate("MainWindow", "Create All"))
        self.btnDeleteAll.setText(_translate("MainWindow", "Delete All"))
        item = self.tblAttendance.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Attendance ID"))
        item = self.tblAttendance.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblAttendance.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblAttendance.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Section"))
        item = self.tblAttendance.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Course ID"))
        item = self.tblAttendance.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Semester"))
        item = self.tblAttendance.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Date"))
        item = self.tblAttendance.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Status"))
        self.btnNewAttendance.setText(_translate("MainWindow", "New"))
        self.btnEditAttendance.setText(_translate("MainWindow", "Edit"))
        self.btnDeleteAttendance.setText(_translate("MainWindow", "Delete"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabAttendance), _translate("MainWindow", "Attendance"))
        self.lblSemesterReports.setText(_translate("MainWindow", "Semester: "))
        self.lblCourseReports.setText(_translate("MainWindow", "Course: "))
        self.lblSectionReports.setText(_translate("MainWindow", "Section: "))
        self.lblDateReports.setText(_translate("MainWindow", "Date:"))
        item = self.tblReports.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "First Name"))
        item = self.tblReports.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Last Name"))
        item = self.tblReports.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Date"))
        item = self.tblReports.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Status"))
        self.btnCourseAttendance.setText(_translate("MainWindow", "Course Attendance"))
        self.btnCourseEnrollment.setText(_translate("MainWindow", "Course Enrollment"))
        self.btnStudentAttendance.setText(_translate("MainWindow", "Student Attendance"))
        self.twtMain.setTabText(self.twtMain.indexOf(self.tabReports), _translate("MainWindow", "Reports"))

    ##################### End UI Generation ###################

    def initialSetup(self):
        self.setupEvents()
        self.setupDatabase()

    def connect_signals(self):
        self.cmbSemesterAttendance.currentIndexChanged.connect(self.refreshAttendance)
        self.cmbCourseAttendance.currentIndexChanged.connect(self.refreshAttendance)
        self.dateAttendance.dateChanged.connect(self.refreshAttendance)
        self.cmbSectionAttendance.currentIndexChanged.connect(self.refreshAttendance)
        self.cmbSemesterReports.currentIndexChanged.connect(self.refreshReports)
        self.cmbCourseReports.currentIndexChanged.connect(self.refreshReports)
        self.dateReports.dateChanged.connect(self.refreshReports)
        self.cmbSectionReports.currentIndexChanged.connect(self.refreshReports)

    #############################################################
    #                                                           #
    #                          Events                           #
    #                                                           #
    #############################################################
    def setupEvents(self):
        self.connectButtonClicked(self.btnNewStudent, self.btnNewStudent_clicked)
        self.connectButtonClicked(self.btnEditStudent, self.btnEditStudent_clicked)
        self.connectButtonClicked(self.btnDeleteStudent, self.btnDeleteStudent_clicked)
        self.connectButtonClicked(self.btnNewCourse, self.btnNewCourse_clicked)
        self.connectButtonClicked(self.btnEditCourse, self.btnEditCourse_clicked)
        self.connectButtonClicked(self.btnDeleteCourse, self.btnDeleteCourse_clicked)
        self.connectButtonClicked(self.btnNewInstructor, self.btnNewInstructor_clicked)
        self.connectButtonClicked(self.btnEditInstructor, self.btnEditInstructor_clicked)
        self.connectButtonClicked(self.btnDeleteInstructor, self.btnDeleteInstructor_clicked)
        self.connectButtonClicked(self.btnNewSchedule, self.btnNewSchedule_clicked)
        self.connectButtonClicked(self.btnEditSchedule, self.btnEditSchedule_clicked)
        self.connectButtonClicked(self.btnDeleteSchedule, self.btnDeleteSchedule_clicked)
        self.connectButtonClicked(self.btnNewRegistration, self.btnNewRegistration_clicked)
        self.connectButtonClicked(self.btnEditRegistration, self.btnEditRegistration_clicked)
        self.connectButtonClicked(self.btnDeleteRegistration, self.btnDeleteRegistration_clicked)
        self.connectButtonClicked(self.btnNewAttendance, self.btnNewAttendance_clicked)
        self.connectButtonClicked(self.btnEditAttendance, self.btnEditAttendance_clicked)
        self.connectButtonClicked(self.btnDeleteAttendance, self.btnDeleteAttendance_clicked)
        self.connectButtonClicked(self.btnCreateAll, self.btnCreateAllAttendance_clicked)
        self.connectButtonClicked(self.btnDeleteAll, self.btnDeleteAllAttendance_clicked)
        self.connectButtonClicked(self.btnCourseAttendance, self.btnCourseAttendance_clicked)
        self.connectButtonClicked(self.btnCourseEnrollment, self.btnCourseEnrollment_clicked)
        self.connectButtonClicked(self.btnStudentAttendance, self.btnStudentAttendance_clicked)

    def connectButtonClicked(self, button, slot):
        button.clicked.connect(slot)

    def btnNewStudent_clicked(self):
        listValues = self.openDialog(student, None)

        if listValues is not None:
            self.insertStudent(listValues)
            self.refreshStudent()

    def btnEditStudent_clicked(self):
        self.editRow(student, self.tblStudent, self.updateStudent, self.refreshStudent)
        self.refreshRegistration()
        self.refreshAttendance()
        self.refreshReports()

    def btnDeleteStudent_clicked(self):
        self.deleteRow(self.tblStudent, self.deleteStudent, self.refreshStudent)

    def btnNewCourse_clicked(self):
        listValues = self.openDialog(course, None)

        if listValues is not None:
            self.insertCourse(listValues)
            self.refreshCourse()
            self.refreshSchedule()
            self.refreshRegistration()
            self.refreshAttendance()
            self.refreshReports()

    def btnEditCourse_clicked(self):
        self.editRow(course, self.tblCourse, self.updateCourse, self.refreshCourse)
        self.refreshSchedule()
        self.refreshRegistration()
        self.refreshAttendance()
        self.refreshReports()

    def btnDeleteCourse_clicked(self):
        self.deleteRow(self.tblCourse, self.deleteCourse, self.refreshCourse)

    def btnNewInstructor_clicked(self):
        listValues = self.openDialog(instructor, None)

        if listValues is not None:
            self.insertInstructor(listValues)
            self.refreshInstructor()
            self.refreshSchedule()

    def btnEditInstructor_clicked(self):
        self.editRow(instructor, self.tblInstructor, self.updateInstructor, self.refreshInstructor)
        self.refreshSchedule()

    def btnDeleteInstructor_clicked(self):
        self.deleteRow(self.tblInstructor, self.deleteInstructor, self.refreshInstructor)

    def btnNewSchedule_clicked(self):
        listValues = self.openDialog(schedule, None)

        if listValues is not None:
            self.insertSchedule(listValues)
            self.refreshSchedule()
            self.refreshRegistration()
            self.refreshAttendance()
            self.refreshReports()

    def btnEditSchedule_clicked(self):
        currentRow = self.tblSchedule.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return

        listValues = []
        listValues.append(self.tblSchedule.item(currentRow, 1).text())  # Instructor
        listValues.append(self.tblSchedule.item(currentRow, 2).text())  # Course
        listValues.append(self.tblSchedule.item(currentRow, 3).text())  # Section
        listValues.append(self.tblSchedule.item(currentRow, 5).text())  # Semester
        schedule_id = self.tblSchedule.item(currentRow, 0).text()

        listValues = self.openDialog(schedule, listValues)
        if listValues is not None:
            self.updateSchedule(listValues, schedule_id)
            self.refreshSchedule()
            self.refreshRegistration()
            self.refreshAttendance()
            self.refreshReports()

    def btnDeleteSchedule_clicked(self):
        self.deleteRow(self.tblSchedule, self.deleteSchedule, self.refreshSchedule)

    def btnNewRegistration_clicked(self):
        listValues = self.openDialog(registration, None)

        if listValues is not None:
            self.insertRegistration(listValues)
            self.refreshRegistration()
            self.refreshAttendance()
            self.refreshReports()

    def btnEditRegistration_clicked(self):
        currentRow = self.tblRegistration.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return

        listValues = []
        listValues.append(self.tblRegistration.item(currentRow, 1).text())  # Student
        listValues.append(self.tblRegistration.item(currentRow, 2).text())  # Course
        listValues.append(self.tblRegistration.item(currentRow, 3).text())  # Section
        listValues.append(self.tblRegistration.item(currentRow, 4).text())  # Semester
        registration_id = self.tblRegistration.item(currentRow, 0).text()

        listValues = self.openDialog(registration, listValues)
        if listValues is not None:
            self.updateRegistration(listValues, registration_id)
            self.refreshRegistration()
            self.refreshAttendance()
            self.refreshReports()

    def btnDeleteRegistration_clicked(self):
        self.deleteRow(self.tblRegistration, self.deleteRegistration, self.refreshRegistration)

    def getCurrentAttendance(self):
        semester = self.cmbSemesterAttendance.currentText()
        section = self.cmbSectionAttendance.currentText()
        courseId = self.cmbCourseAttendance.currentText()
        date = self.dateAttendance.date().toString("yyyy-MM-dd")
        return courseId, section, semester, date

    def getCurrentReports(self):
        course = self.cmbCourseReports.currentText()
        section = self.cmbSectionReports.currentText()
        semester = self.cmbSemesterReports.currentText()
        date = self.dateReports.date().toPyDate()
        return course, section, semester, date

    def btnNewAttendance_clicked(self):
        courseId, section, semester, date = self.getCurrentAttendance()
        data = self.matchInToRegistration(courseId, section, semester, date)
        studentIds = [rows[0] for rows in data]

        Dialog = QtWidgets.QDialog()
        form = attendance.Ui_Dialog()
        form.setupUi(Dialog, None, studentIds)
        result = Dialog.exec_()
        if result == 1:
            if form.getValues() is not None:
                self.insertAttendance(form.getValues())
                self.refreshAttendance()

    def btnEditAttendance_clicked(self):
        currentRow = self.tblAttendance.currentRow()

        if currentRow == -1:
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return

        listValues = []
        studentName = self.tblAttendance.item(currentRow, 1).text() + " " + self.tblAttendance.item(currentRow,
                                                                                                    2).text()
        studentId = self.getStudentID(studentName)
        registration_id = self.tblAttendance.item(currentRow, 0).text()

        listValues.append(str(studentId))  # Student
        listValues.append(self.tblAttendance.item(currentRow, 7).text())  # Status

        courseId, section, semester, date = self.getCurrentAttendance()
        data = self.matchInToRegistration(courseId, section, semester, date)
        studentIds = [rows[0] for rows in data]

        Dialog = QtWidgets.QDialog()
        form = attendance.Ui_Dialog()
        form.setupUi(Dialog, listValues, studentIds)
        result = Dialog.exec_()
        listValues = form.getValues()
        if result == 1:
            if listValues is not None:
                self.updateAttendance(listValues, registration_id)
                self.refreshAttendance()

    def btnDeleteAttendance_clicked(self):
        self.deleteRow(self.tblAttendance, self.deleteAttendance, self.refreshAttendance)

    def btnCreateAllAttendance_clicked(self):
        courseId, section, semester, date = self.getCurrentAttendance()
        data = self.matchInToRegistration(courseId, section, semester, date)
        studentIds = [rows[0] for rows in data]
        for studentId in studentIds:
            self.insertAttendance([studentId, "Present", date])
        self.refreshAttendance()

    def btnDeleteAllAttendance_clicked(self):
        answer = QMessageBox.question(
            None,
            "Delete row?",
            "Are you sure you want to delete all?",
            QMessageBox.StandardButton.Yes |
            QMessageBox.StandardButton.No
        )

        # Check if user clicked Yes button
        if answer == QMessageBox.StandardButton.Yes:

            for i in range(self.tblAttendance.rowCount()):
                self.deleteAttendance(self.tblAttendance.item(i, 0).text())
            self.refreshAttendance()

    # Regular attendance is a crucial component of academic success,
    # and understanding attendance patterns can provide valuable
    # insights for course instructors. For example, consistently low
    # attendance may indicate a scheduling issue, lack of student engagement,
    # or problems with the course material. This report can aid instructors in
    # identifying potential issues early and taking necessary measures to enhance
    # course effectiveness and student engagement. Furthermore, the report can also be
    # used to follow-up with students who are frequently absent, helping to ensure they
    # do not fall behind in their coursework.
    def btnCourseAttendance_clicked(self):
        self.tblReports.setRowCount(0)

        self.tblReports.setColumnCount(6)
        self.tblReports.setHorizontalHeaderLabels(("Course Name", "Semester", "Date of Class",
                                                   "Total Students", "Attended",
                                                   "% of Attended"))

        courseId, section, semester, date = self.getCurrentReports()
        data = self.matchInToRegistration(courseId, section, semester, date)
        if not data:
            QMessageBox.warning(None, "No Data", "No data found")
            return
        registrationId = data[0][0]
        courseName = self.getCourseName(courseId)
        totalStudents = self.getTotalStudents(registrationId)
        if totalStudents == 0:
            QMessageBox.warning(None, "No students registered",
                                "This course has no students registered.")
            return
        attendedStudents = self.getAttendedStudents(courseId, section, semester, date)
        percentage = (attendedStudents / totalStudents) * 100

        row = self.tblReports.rowCount()
        self.tblReports.insertRow(row)
        self.tblReports.setItem(row, 0, QtWidgets.QTableWidgetItem(courseName))
        self.tblReports.setItem(row, 1, QtWidgets.QTableWidgetItem(semester))
        self.tblReports.setItem(row, 2, QtWidgets.QTableWidgetItem(str(date)))
        self.tblReports.setItem(row, 3, QtWidgets.QTableWidgetItem(str(totalStudents)))
        self.tblReports.setItem(row, 4, QtWidgets.QTableWidgetItem(str(attendedStudents)))
        self.tblReports.setItem(row, 5, QtWidgets.QTableWidgetItem(str(percentage)))

    # This report would be beneficial for administrators to understand which courses are popular among students,
    # and can guide decisions about resources allocation (such as classroom assignments, adding more sections, etc.).

    def btnCourseEnrollment_clicked(self):
        self.tblReports.setRowCount(0)

        self.tblReports.setColumnCount(4)
        self.tblReports.setHorizontalHeaderLabels(("Course Name", "Section", "Semester", "Enrolled Students"))
        courseId, section, semester, date = self.getCurrentReports()
        data = self.matchInToRegistration(courseId, section, semester, date)
        if not data:
            QMessageBox.warning(None, "No Data", "No data found")
            return
        registrationId = data[0][0]
        courseName = self.getCourseName(courseId)
        totalStudents = self.getTotalStudents(registrationId)
        row = self.tblReports.rowCount()

        self.tblReports.insertRow(row)
        self.tblReports.setItem(row, 0, QtWidgets.QTableWidgetItem(courseName))
        self.tblReports.setItem(row, 1, QtWidgets.QTableWidgetItem(section))
        self.tblReports.setItem(row, 2, QtWidgets.QTableWidgetItem(semester))
        self.tblReports.setItem(row, 3, QtWidgets.QTableWidgetItem(str(totalStudents)))

    # Monitoring attendance can help instructors identify students who may be at risk of falling behind due to absences.
    # Regular attendance often correlates with better understanding of the course material and higher grades.
    def btnStudentAttendance_clicked(self):
        self.tblReports.setRowCount(0)

        self.tblReports.setColumnCount(3)
        self.tblReports.setHorizontalHeaderLabels(("Student First Name", "Student Last Name", "% of Attended"))

        courseId = self.cmbCourseReports.currentText()
        section = self.cmbSectionReports.currentText()
        semester = self.cmbSemesterReports.currentText()

        cursor = self.execute_query(
            "SELECT student.* FROM student "
            "INNER JOIN registration ON student.student_id = registration.student_id "
            "NATURAL JOIN schedule "
            "NATURAL JOIN course "
            "WHERE schedule.course_id = %s AND schedule.section = %s AND schedule.semester = %s",
            [courseId, section, semester]
        )
        dataStudents = cursor.fetchall()
        for student in dataStudents:
            row = self.tblReports.rowCount()
            percentage = self.getPercentageOfParticularStudentInCourse(student[0], courseId, section, semester)
            self.tblReports.insertRow(row)
            self.tblReports.setItem(row, 0, QtWidgets.QTableWidgetItem(student[1]))
            self.tblReports.setItem(row, 1, QtWidgets.QTableWidgetItem(student[2]))
            self.tblReports.setItem(row, 2, QtWidgets.QTableWidgetItem(str(percentage)))

    def getCourseName(self, course_id):
        cursor = self.execute_query("SELECT course_title FROM course WHERE course_id = %s", (course_id,))
        return cursor.fetchone()[0]

    def getTotalStudents(self, registration_id):
        cursor = self.execute_query(
            "SELECT COUNT(*) FROM registration natural join schedule WHERE schedule_id = (select schedule_id from registration where registration_id = %s)",
            (registration_id,))
        return cursor.fetchone()[0]

    def getAttendedStudents(self, course_id, section, semester, date):
        cursor = self.execute_query(
            "SELECT COUNT(*) from registration right join attendance on registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "WHERE course_id = %s AND section = %s AND semester = %s AND attendance_date = %s AND status = '1' ",
            (course_id, section, semester, date))
        return cursor.fetchone()[0]
    def getPercantageOfParticularStudent(self, student_id):

        cursor = self.execute_query(
            "SELECT 100 * COUNT(*) / (SELECT COUNT(*) from registration right join attendance on registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "WHERE student_id = %s) "
            "from registration right join attendance on registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "WHERE student_id = %s AND status = '1' ",
            (student_id, student_id,))
        return cursor.fetchone()[0]

    def getPercentageOfParticularStudentInCourse(self, student_id, course_id, section, semester):
        cursor = self.execute_query(
            "SELECT 100 * COUNT(*) / (SELECT COUNT(*) FROM registration "
            "RIGHT JOIN attendance ON registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "WHERE student_id = %s AND schedule.course_id = %s AND schedule.section = %s AND schedule.semester = %s) "
            "FROM registration RIGHT JOIN attendance ON registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "WHERE student_id = %s AND status = '1' AND schedule.course_id = %s AND schedule.section = %s AND schedule.semester = %s",
            (student_id, course_id, section, semester, student_id, course_id, section, semester,))
        return cursor.fetchone()[0]

    def openDialog(self, dialogClass, listValues):
        Dialog = QtWidgets.QDialog()
        form = dialogClass.Ui_Dialog()
        form.setupUi(Dialog, listValues)
        result = Dialog.exec_()

        if result == 1:
            return form.getValues()

        return None

    def getCurrentRowValues(self, tableWidget):
        currentRow = tableWidget.currentRow()
        if currentRow == -1:  # No row selected
            QMessageBox.warning(None, "Select Row", "Please select row first")
            return None
        else:
            listValues = [tableWidget.item(currentRow, column).text() for column in range(tableWidget.columnCount())]
            return listValues

    def editRow(self, dialogClass, tableWidget, updateFunction, refreshFunction):
        listValues = self.getCurrentRowValues(tableWidget)
        if listValues is None:  # No row selected
            return

        original_ID = listValues[0]
        listValues = self.openDialog(dialogClass, listValues)
        if listValues is not None:
            updateFunction(listValues, original_ID)
            refreshFunction()

    def deleteRow(self, tableWidget, deleteFunction, refreshFunction):
        listValues = self.getCurrentRowValues(tableWidget)
        if listValues is None:  # No row selected
            return

        answer = QMessageBox.question(
            None,
            "Delete row?",
            "Are you sure you want to delete this row?",
            QMessageBox.StandardButton.Yes |
            QMessageBox.StandardButton.No
        )

        # Check if user clicked Yes button
        if answer == QMessageBox.StandardButton.Yes:
            ID = listValues[0]

            # Delete from database
            deleteFunction(ID)

            # Requery
            refreshFunction()

    #############################################################
    #                                                           #
    #                          Database                         #
    #                                                           #
    #############################################################

    def setupDatabase(self):
        # Establishes the connection and refreshes category and expense data
        self.connect()
        self.refreshStudent()
        self.refreshCourse()
        self.refreshInstructor()
        self.refreshSchedule()
        self.refreshRegistration()
        self.refreshAttendance()
        self.refreshReports()

    def connect(self):
        # Connects to the database
        self.cnx = mysql.connector.connect(user="root",
                                           password="ljt916159807",
                                           host="127.0.0.1",
                                           database="mydb")

    def execute_query(self, query, values=None):
        # Creates a cursor, executes a query, and then returns the cursor
        cursor = self.cnx.cursor()
        cursor.execute(query, values)
        return cursor

    def commit_and_close(self, cursor):
        # Commits any changes and closes the cursor
        self.cnx.commit()
        cursor.close()

    def refreshStudent(self):
        # Refreshes the student view by clearing the table and inserting the new data
        self.tblStudent.setRowCount(0)
        self.tblStudent.setColumnWidth(3, 250)

        cursor = self.execute_query("Select * From student")

        for (student_ID, student_first_name, student_last_name, student_email) in cursor:  # Field names in DB
            rowCount = self.tblStudent.rowCount()
            self.tblStudent.insertRow(rowCount)
            self.tblStudent.setItem(rowCount, 0, QTableWidgetItem(str(student_ID)))
            self.tblStudent.setItem(rowCount, 1, QTableWidgetItem(student_first_name))
            self.tblStudent.setItem(rowCount, 2, QTableWidgetItem(student_last_name))
            self.tblStudent.setItem(rowCount, 3, QTableWidgetItem(student_email))

        self.commit_and_close(cursor)

    def insertStudent(self, a_listValues):
        # Inserts a new student into the database
        if a_listValues[0].strip() == '' or a_listValues[1].strip() == '':
            QMessageBox.warning(None, "Cannot Add",
                                "Both Student ID and First Name are required.")
            return
        cursor = self.execute_query(
            "Insert Into student (student_id, student_first_name, student_last_name, student_email) "
            "Values (%s, %s, %s, %s)", (a_listValues[0], a_listValues[1], a_listValues[2], a_listValues[3]))
        self.commit_and_close(cursor)

    def updateStudent(self, a_listValues, original_student_ID):
        # Updates an existing student in the database
        cursor = self.execute_query("Update student "
                                    "Set student_ID = %s, student_first_name = %s, student_last_name = %s, student_email = %s "
                                    "Where student_ID = %s",
                                    [a_listValues[0], a_listValues[1], a_listValues[2], a_listValues[3],
                                     original_student_ID])
        self.commit_and_close(cursor)

    def deleteStudent(self, a_ID):
        # Deletes a student from the database
        # make sure course in other tables could not be deleted
        cursor = self.execute_query("Select * from registration Where student_id = %s", [a_ID])
        result = cursor.fetchone()

        if result is not None:
            QMessageBox.warning(None, "Cannot Delete",
                                "This student has registration information and cannot be deleted.")
            cursor.fetchall()
            return
        cursor = self.execute_query("Delete from student Where student_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshCourse(self):
        # Refreshes the course view by clearing the table and inserting the new data
        self.tblCourse.setRowCount(0)
        self.tblCourse.setColumnWidth(1, 700)

        cursor = self.execute_query("Select * From course")

        for (course_ID, course_title) in cursor:  # Field names in DB
            rowCount = self.tblCourse.rowCount()
            self.tblCourse.insertRow(rowCount)
            self.tblCourse.setItem(rowCount, 0, QTableWidgetItem(str(course_ID)))
            self.tblCourse.setItem(rowCount, 1, QTableWidgetItem(course_title))

        self.commit_and_close(cursor)

    def insertCourse(self, a_listValues):
        # Inserts a new course into the database
        if a_listValues[0].strip() == '' or a_listValues[1].strip() == '':
            QMessageBox.warning(None, "Cannot Add",
                                "Both Course ID and Course Title are required.")
            return
        cursor = self.execute_query("Insert Into course (course_id, course_title) "
                                    "Values (%s, %s)", (a_listValues[0], a_listValues[1]))
        self.commit_and_close(cursor)

    def updateCourse(self, a_listValues, original_course_ID):
        # Updates an existing course in the database
        cursor = self.execute_query("Update course "
                                    "Set course_ID = %s, course_title = %s"
                                    "Where course_ID = %s",
                                    [a_listValues[0], a_listValues[1], original_course_ID])
        self.commit_and_close(cursor)

    def deleteCourse(self, a_ID):
        # Deletes a course from the database
        # make sure course in other tables could not be deleted
        cursor = self.execute_query("Select * from schedule Where course_id = %s", [a_ID])
        result = cursor.fetchone()

        if result is not None:
            QMessageBox.warning(None, "Cannot Delete",
                                "This course is already scheduled and cannot be deleted.")
            cursor.fetchall()
            return
        cursor = self.execute_query("Delete from course Where course_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshInstructor(self):
        # Refreshes the instructor view by clearing the table and inserting the new data
        self.tblInstructor.setRowCount(0)

        cursor = self.execute_query("Select * From instructor")

        for (instructor_id, instructor_name) in cursor:  # Field names in DB
            rowCount = self.tblInstructor.rowCount()
            self.tblInstructor.insertRow(rowCount)
            self.tblInstructor.setItem(rowCount, 0, QTableWidgetItem(str(instructor_id)))
            self.tblInstructor.setItem(rowCount, 1, QTableWidgetItem(instructor_name))

        self.commit_and_close(cursor)

    def insertInstructor(self, a_listValues):
        # Inserts a new instructor into the database
        if a_listValues[0].strip() == '' or a_listValues[1].strip() == '':
            QMessageBox.warning(None, "Cannot Add",
                                "Both Instructor ID and Instructor Name are required.")
            return
        cursor = self.execute_query("Insert Into instructor (instructor_id, instructor_name) "
                                    "Values (%s, %s)", (a_listValues[0], a_listValues[1]))
        self.commit_and_close(cursor)

    def updateInstructor(self, a_listValues, original_instructor_ID):
        # Updates an existing instructor in the database
        cursor = self.execute_query("Update instructor "
                                    "Set instructor_id = %s, instructor_name = %s"
                                    "Where instructor_id = %s",
                                    [a_listValues[0], a_listValues[1], original_instructor_ID])
        self.commit_and_close(cursor)

    def deleteInstructor(self, a_ID):
        # Deletes a instructor from the database
        # make sure instructor in other tables could not be deleted
        cursor = self.execute_query("Select * from schedule Where instructor_id = %s", [a_ID])
        result = cursor.fetchone()

        if result is not None:
            QMessageBox.warning(None, "Cannot Delete",
                                "This instructor has schedules and cannot be deleted.")
            cursor.fetchall()
            return
        cursor = self.execute_query("Delete from instructor Where instructor_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshSchedule(self):
        self.tblSchedule.setColumnWidth(3, 60)
        self.tblSchedule.setColumnWidth(4, 350)
        # Refreshes the schedule view by clearing the table and inserting the new data
        self.tblSchedule.setRowCount(0)

        cursor = self.execute_query("Select schedule_id, instructor_name, course_id, section, course_title, semester "
                                    "from schedule natural join instructor "
                                    "natural join course "
                                    "order by semester, course_id, section")

        for (schedule_id, instructor_name, course_id, section, course_title, semester) in cursor:
            rowCount = self.tblSchedule.rowCount()
            self.tblSchedule.insertRow(rowCount)
            self.tblSchedule.setItem(rowCount, 0, QTableWidgetItem(str(schedule_id)))
            self.tblSchedule.setItem(rowCount, 1, QTableWidgetItem(str(instructor_name)))
            self.tblSchedule.setItem(rowCount, 2, QTableWidgetItem(str(course_id)))
            self.tblSchedule.setItem(rowCount, 3, QTableWidgetItem(str(section)))
            self.tblSchedule.setItem(rowCount, 4, QTableWidgetItem(str(course_title)))
            self.tblSchedule.setItem(rowCount, 5, QTableWidgetItem(str(semester)))

        self.commit_and_close(cursor)

    def insertSchedule(self, a_listValues):
        # Inserts a new schedule into the database
        if a_listValues[2].strip() == '':
            QMessageBox.warning(None, "Cannot Add",
                                "Section is required.")
            return
        instructor_id = self.getInstructorID(a_listValues)
        cursor = self.execute_query(
            "Insert Into schedule (instructor_id, course_id, section, semester) "
            "Values (%s, %s, %s, %s )",
            (instructor_id, a_listValues[1], a_listValues[2], a_listValues[3]))
        self.commit_and_close(cursor)

    def updateSchedule(self, a_listValues, schedule_id):
        # Updates an existing schedule in the database
        instructor_id = self.getInstructorID(a_listValues)
        cursor = self.execute_query("Update schedule "
                                    "Set instructor_id = %s, course_id = %s, section = %s, semester = %s "
                                    "Where schedule_id = %s",
                                    [instructor_id, a_listValues[1], a_listValues[2], a_listValues[3], schedule_id])
        self.commit_and_close(cursor)

    def getInstructorID(self, a_listValues):
        # Returns the ID of a instructor based on its name
        cursor = self.execute_query("Select instructor_id From instructor Where instructor_name = %s",
                                    (a_listValues[0],))
        result = cursor.fetchone()
        instructor_id = result[0]
        cursor.close()

        return instructor_id

    def deleteSchedule(self, a_ID):
        # Deletes a schedule from the database
        # make sure schedule in other tables could not be deleted
        cursor = self.execute_query("Select * from registration Where schedule_id = %s", [a_ID])
        result = cursor.fetchone()

        if result is not None:
            QMessageBox.warning(None, "Cannot Delete",
                                "This schedule already has registration information and cannot be deleted.")
            cursor.fetchall()
            return
        cursor = self.execute_query("Delete from schedule Where schedule_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshRegistration(self):
        # Refreshes the registration view by clearing the table and inserting the new data
        self.tblRegistration.setRowCount(0)

        cursor = self.execute_query(
            "Select registration_id, concat(student_first_name, ' ', student_last_name), course_id, section, semester "
            "from registration natural join student "
            "natural join schedule")

        for (registration_id, student_name, course_id, section, semester) in cursor:
            rowCount = self.tblRegistration.rowCount()
            self.tblRegistration.insertRow(rowCount)
            self.tblRegistration.setItem(rowCount, 0, QTableWidgetItem(str(registration_id)))
            self.tblRegistration.setItem(rowCount, 1, QTableWidgetItem(str(student_name)))
            self.tblRegistration.setItem(rowCount, 2, QTableWidgetItem(str(course_id)))
            self.tblRegistration.setItem(rowCount, 3, QTableWidgetItem(str(section)))
            self.tblRegistration.setItem(rowCount, 4, QTableWidgetItem(str(semester)))

        self.commit_and_close(cursor)

    def insertRegistration(self, a_listValues):
        # Inserts a new registration into the database
        student_id = self.getStudentID(a_listValues[0])
        schedule_id = self.getScheduleID(a_listValues[1])
        cursor = self.execute_query(
            "Insert Into registration (student_id, schedule_id) "
            "Values (%s, %s)",
            (student_id, schedule_id))
        self.commit_and_close(cursor)

    def getStudentID(self, a_listValues):
        # Returns the ID of a student based on its name
        student_name = a_listValues.split(" ")  # Split the full name into parts
        student_first_name = student_name[0]
        student_last_name = student_name[1]

        cursor = self.execute_query("Select student_id "
                                    "from student "
                                    "Where student_first_name = %s and student_last_name = %s",
                                    [student_first_name, student_last_name])
        result = cursor.fetchone()
        self.commit_and_close(cursor)

        if result is not None:
            return result[0]

        return None

    def getScheduleID(self, a_listValues):
        # Returns the ID of a schedule based on its name
        parts = a_listValues.split(' - ')
        semester = parts[0]
        course_id = parts[1]
        section = parts[2]

        cursor = self.execute_query("Select schedule_id "
                                    "from schedule "
                                    "Where semester = %s and course_id = %s and section = %s",
                                    [semester, course_id, section])
        result = cursor.fetchone()
        self.commit_and_close(cursor)

        if result is not None:
            return result[0]

        return None

    def updateRegistration(self, a_listValues, registration_id):
        # Updates an existing registration in the database
        student_id = self.getStudentID(a_listValues[0])
        schedule_id = self.getScheduleID(a_listValues[1])
        cursor = self.execute_query("Update registration "
                                    "Set student_id = %s, schedule_id = %s "
                                    "Where registration_id = %s",
                                    [student_id, schedule_id, registration_id])
        self.commit_and_close(cursor)

    def deleteRegistration(self, a_ID):
        # Deletes a registration from the database
        # make sure registration in other tables could not be deleted
        cursor = self.execute_query("Select * from attendance Where registration_id = %s", [a_ID])
        result = cursor.fetchone()

        if result is not None:
            QMessageBox.warning(None, "Cannot Delete",
                                "This registration already has attendance information and cannot be deleted.")
            cursor.fetchall()
            return
        cursor = self.execute_query("Delete from registration Where registration_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def refreshAttendance(self):
        # Refreshes the attendance view by clearing the table and inserting the new data
        self.tblAttendance.setRowCount(0)
        self.setupComboboxSemester(self.cmbSemesterAttendance)
        self.setupComboboxCourse(self.cmbSemesterAttendance, self.cmbCourseAttendance)
        self.setupComboboxSection(self.cmbCourseAttendance, self.cmbSectionAttendance)
        course, section, semester, date = self.getCurrentAttendance()
        cursor = self.execute_query(
            "Select attendance_id, student_first_name, student_last_name, semester, course_id, section, attendance_date, status "
            "from registration right join attendance on registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "where semester = %s and course_id = %s and section = %s and attendance_date = %s",
            [semester, course, section, date])

        for (attendance_id, student_first_name, student_last_name, semester, course_id, section, attendance_date,
             status) in cursor:
            rowCount = self.tblAttendance.rowCount()
            self.tblAttendance.insertRow(rowCount)
            self.tblAttendance.setItem(rowCount, 0, QTableWidgetItem(str(attendance_id)))
            self.tblAttendance.setItem(rowCount, 1, QTableWidgetItem(str(student_first_name)))
            self.tblAttendance.setItem(rowCount, 2, QTableWidgetItem(str(student_last_name)))
            self.tblAttendance.setItem(rowCount, 3, QTableWidgetItem(str(course_id)))
            self.tblAttendance.setItem(rowCount, 4, QTableWidgetItem(str(section)))
            self.tblAttendance.setItem(rowCount, 5, QTableWidgetItem(str(semester)))
            self.tblAttendance.setItem(rowCount, 6, QTableWidgetItem(str(attendance_date)))
            self.tblAttendance.setItem(rowCount, 7, QTableWidgetItem("Present" if status == 1 else "Absent"))
        self.commit_and_close(cursor)

    def getRegistrationID(self, a_listValues):
        # Returns the ID of a registration based on its course ID, section, and semester
        course_id = a_listValues[0]
        section = a_listValues[1]
        semester = a_listValues[2]

        cursor = self.execute_query("Select schedule_id "
                                    "from schedule "
                                    "Where course_id = %s and section = %s and semester = %s",
                                    [course_id, section, semester])
        result = cursor.fetchone()
        self.commit_and_close(cursor)

        if result is not None:
            return result[0]

        return None

    def insertAttendance(self, a_listValues):
        # Inserts a new attendance into the database
        courseId, section, semester, date = self.getCurrentAttendance()
        student_id = a_listValues[0]
        status = 1 if a_listValues[1] == "Present" else 0
        cursorRegId = self.execute_query("Select registration_id "
                                         "from registration "
                                         "Where student_id = %s and schedule_id = %s",
                                         [student_id, self.getRegistrationID([courseId, section, semester])])
        result = cursorRegId.fetchone()
        self.commit_and_close(cursorRegId)
        if result is not None:
            registration_id = result[0]
        else:
            registration_id = None

        cursor = self.execute_query(
            "Insert Into attendance (registration_id, attendance_date, status) "
            "Values (%s, %s, %s)",
            [registration_id, date, status])
        self.commit_and_close(cursor)

    def updateAttendance(self, a_listValues, attendance_id):
        # Updates an existing attendance in the database
        student_id = a_listValues[0]
        cursorRegId = self.execute_query("Select student_id "
                                         "from attendance natural join registration "
                                         "Where attendance_id = %s ",
                                         [attendance_id])
        result = cursorRegId.fetchone()
        self.commit_and_close(cursorRegId)
        if int(result[0]) != int(student_id):
            self.insertAttendance(a_listValues)
        else:
            status = 1 if a_listValues[1] == "Present" else 0
            cursor = self.execute_query("Update attendance "
                                        "Set status = %s "
                                        "Where attendance_id = %s ",
                                        [status, attendance_id])
            self.commit_and_close(cursor)

    def deleteAttendance(self, a_ID):
        # Deletes an attendance from the database
        cursor = self.execute_query("Delete from attendance Where attendance_ID = %s", [a_ID])
        self.commit_and_close(cursor)

    def matchInToRegistration(self, course_id, section, semester, date):
        cursor = self.execute_query(
            "Select student_id, registration_id From registration right join schedule on registration.schedule_id = schedule.schedule_id "
            "where schedule.course_id = %s and schedule.section = %s and schedule.semester = %s",
            [course_id, section, semester])
        data = []
        for (student_id, registration_id) in cursor:
            row = [student_id, registration_id, date]
            data.append(row)
        self.commit_and_close(cursor)
        return data

    def refreshReports(self):
        self.tblReports.setRowCount(0)
        self.tblReports.setColumnCount(4)
        self.tblReports.setHorizontalHeaderLabels(("Student First Name", "Student Last Name", "Date", "Status"))

        self.setupComboboxSemester(self.cmbSemesterReports)
        self.setupComboboxCourse(self.cmbSemesterReports, self.cmbCourseReports)
        self.setupComboboxSection(self.cmbCourseReports, self.cmbSectionReports)
        course, section, semester, date = self.getCurrentReports()
        cursor = self.execute_query(
            "Select student_first_name, student_last_name, attendance_date, status "
            "from registration right join attendance on registration.registration_id = attendance.registration_id "
            "natural join student "
            "natural join schedule "
            "where semester = %s and course_id = %s and section = %s and attendance_date = %s",
            [semester, course, section, date])

        for (student_first_name, student_last_name, attendance_date, status) in cursor:
            rowCount = self.tblReports.rowCount()
            self.tblReports.insertRow(rowCount)
            self.tblReports.setItem(rowCount, 0, QTableWidgetItem(str(student_first_name)))
            self.tblReports.setItem(rowCount, 1, QTableWidgetItem(str(student_last_name)))
            self.tblReports.setItem(rowCount, 2, QTableWidgetItem(str(attendance_date)))
            self.tblReports.setItem(rowCount, 3, QTableWidgetItem("Present" if status == 1 else "Absent"))
        self.commit_and_close(cursor)

    def setupComboboxSemester(self, cmbSemester):
        semesters = ["23SU", "23FA", "24SP", "24SU", "24FA", "25SP", "25SU", "25FA"]
        for semester in semesters:
            if cmbSemester.findText(semester) == -1:  # item not found in combobox
                cmbSemester.addItem(semester)

    def setupComboboxCourse(self, cmbSemester, cmbCourse):
        semester = cmbSemester.currentText()
        index = 0 if cmbCourse.currentIndex() == -1 else cmbCourse.currentIndex()
        cmbCourse.blockSignals(True)
        # Clear the combobox to avoid irrelevant sections
        cmbCourse.clear()
        cursor = self.execute_query("Select course_id From schedule Where semester = %s", [semester])
        for (course_id,) in cursor:
            course_str = str(course_id)
            if cmbCourse.findText(course_str) == -1:  # item not found in combobox
                cmbCourse.addItem(course_str)
        self.commit_and_close(cursor)
        cmbCourse.setCurrentIndex(index)

    def setupComboboxSection(self, cmbCourse, cmbSection):
        course = cmbCourse.currentText()
        index = 0 if cmbSection.currentIndex() == -1 else cmbSection.currentIndex()
        cmbSection.blockSignals(True)
        # Clear the combobox to avoid irrelevant sections
        cmbSection.clear()
        cursor = self.execute_query("Select section From schedule where course_id = %s", [course])
        for (section,) in cursor:
            section_str = str(section)
            cmbSection.addItem(section_str)
        self.commit_and_close(cursor)
        cmbSection.setCurrentIndex(index)
        cmbSection.blockSignals(False)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
